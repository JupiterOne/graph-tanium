type AssetImportPayload {
  id: Int
  index: Int!
  status: AssetImportStatus!
}

enum AssetImportStatus {
  NoChange
  Updated
  Created
  ErrorInvalidState
  ErrorMissingKey
  ErrorDuplicateItemInProcess
}

type AssetProduct {
  vendor: String!
  name: String!
  installation: AssetProductInstallation
  tracking: AssetProductTracking
  usage: AssetProductUsage
  versions: [AssetProductVersion!]
}

type AssetProductConnection implements Connection {
  edges: [AssetProductEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AssetProductEdge implements Edge {
  cursor: Cursor!
  node: AssetProduct!
}

type AssetProductEndpoint {
  id: Int
  eid: Int
  computerName: String
  computerId: String
  serialNumber: String
  osPlatform: String
  operatingSystem: String
  servicePack: String
  manufacturer: String
  ipAddress: String
  userName: String
  createdAt: Time
  updatedAt: Time
}

type AssetProductEndpointConnection implements Connection {
  edges: [AssetProductEndpointEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AssetProductEndpointEdge implements Edge {
  cursor: Cursor!
  node: AssetProductEndpoint!
}

input AssetProductEndpointsFilter {
  vendor: String
  name: String
  version: String
  usage: AssetProductUsageEnum
}

type AssetProductInstallation {
  installedCount: Int
  usedCount: Int
  unusedCount: Int
  pendingUsage: Int
}

input AssetProductsFilter {
  vendors: [String!]
  search: String
  states: [AssetProductState!]
}

input AssetProductsInput {
  vendor: String!
  name: String!
  tracking: AssetProductTrackingInput!
}

type AssetProductsPayload {
  products: [AssetProductsResult!]
}

type AssetProductsResult {
  vendor: String
  name: String
  tracking: AssetProductTracking
  failureReason: String
}

enum AssetProductState {
  Tracked
  Cataloged
  Ignored
}

type AssetProductTracking {
  state: AssetProductState
  reportingPeriodDays: Int
  normalMinutesUsedPerDay: Int
  highMinutesUsedPerDay: Int
  baselinePeriodDays: Int
}

input AssetProductTrackingInput {
  state: AssetProductState!
  reportingPeriodDays: Int!
  normalMinutesUsedPerDay: Int!
  highMinutesUsedPerDay: Int!
  baselinePeriodDays: Int!
}

type AssetProductUsage {
  usageNotDetected: Int!
  notInstalled: Int!
  baselining: Int!
  limited: Int!
  normal: Int!
  high: Int!
}

enum AssetProductUsageEnum {
  NotInstalled
  UsageNotDetected
  Baselining
  Limited
  Normal
  High
}

type AssetProductVersion {
  version: String!
  installs: Int!
}

input AssetsImportInput {
  sourceName: String!
  json: String!
}

type AssetsImportPayload {
  assets: [AssetImportPayload!]
}

interface Connection {
  edges: [Edge]!
  pageInfo: PageInfo!
}

scalar Cursor

scalar Date

interface Edge {
  cursor: Cursor!
}

input FieldFilter {
  path: String
  op: FieldFilterOp! = EQ
  negated: Boolean! = false
  value: String
  filters: [FieldFilter!]
  any: Boolean! = false
  restrictOwner: Boolean! = true
}

enum FieldFilterOp {
  EQ
  LT
  LTE
  GT
  GTE
  CONTAINS
  STARTS_WITH
  ENDS_WITH
  MATCHES
  UPDATED_AFTER
  READ_AFTER
}

input GraphqlRequiredPrivilege {
  name: String!
  displayName: String!
}

enum GraphqlRestHTTPMethod {
  DELETE
  GET
  PATCH
  PUT
  POST
}

input GraphqlRestPagination {
  style: GraphqlRestPaginationStyle! = LIMIT_OFFSET
  totalRecordsPath: [String!]
  recordsPath: [String!]
}

enum GraphqlRestPaginationStyle {
  LIMIT_OFFSET
}

input IdRefInput {
  id: ID!
}

scalar Map

type Mutation {
  assetProducts(input: [AssetProductsInput!]!): AssetProductsPayload
  assetsImport(input: AssetsImportInput!): AssetsImportPayload!
}

input NamedRefInput {
  id: ID
  name: String
}

input NameOnlyRefInput {
  name: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

type Query {
  assetProductEndpoints(filter: AssetProductEndpointsFilter, after: Cursor, first: Int): AssetProductEndpointConnection
  assetProducts(filter: AssetProductsFilter, after: Cursor, first: Int): AssetProductConnection
}

type SystemError {
  message: String
  retryable: Boolean
  timedOut: Boolean
}

scalar Time